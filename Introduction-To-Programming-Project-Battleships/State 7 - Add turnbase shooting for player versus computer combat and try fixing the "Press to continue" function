// IntroductionToProgrammingProjectBattleShips.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <fstream>
#include <windows.h>
#include <random>

const int AIRCRAFT_CARRIER_SIZE = 5;
const int BATTLESHIP_SIZE = 4;
const int CRUISER_SIZE = 3;
const int DESTROYER_SIZE = 2;


bool checkValidCoordinates(char** playerBoard, unsigned boardSize, int indexStartingRow, int indexStartingColumn, char aircraft, char direction) {


    //Check if indexes are in the boundaries
    if (indexStartingRow<1 || indexStartingRow>boardSize) {
        return false;
    }

    if (indexStartingColumn<1 || indexStartingColumn>boardSize) {
        return false;
    }

    //Check direction of positioning
    if (direction == 'h' || direction == 'H') {

        //Check all aircrafts
        if (aircraft == 'A') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingColumn + 5 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingColumn; i < indexStartingColumn + 5; i++)
            {
                if (playerBoard[indexStartingRow][i] != '*') {
                    return false;
                }
            }
        }

        if (aircraft == 'B') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingColumn + 4 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingColumn; i < indexStartingColumn + 4; i++)
            {
                if (playerBoard[indexStartingRow][i] != '*') {
                    return false;
                }
            }
        }

        if (aircraft == 'C') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingColumn + 3 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingColumn; i < indexStartingColumn + 3; i++)
            {
                if (playerBoard[indexStartingRow][i] != '*') {
                    return false;
                }
            }
        }

        if (aircraft == 'D') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingColumn + 2 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingColumn; i < indexStartingColumn + 2; i++)
            {
                if (playerBoard[indexStartingRow][i] != '*') {
                    return false;
                }
            }
        }
    }

    else {

        if (aircraft == 'A') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingRow + 5 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingRow; i < indexStartingRow + 5; i++)
            {
                if (playerBoard[i][indexStartingColumn] != '*') {
                    return false;
                }
            }
        }

        if (aircraft == 'B') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingRow + 4 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingRow; i < indexStartingRow + 4; i++)
            {
                if (playerBoard[i][indexStartingColumn] != '*') {
                    return false;
                }
            }
        }

        if (aircraft == 'C') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingRow + 3 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingRow; i < indexStartingRow + 3; i++)
            {
                if (playerBoard[i][indexStartingColumn] != '*') {
                    return false;
                }
            }
        }

        if (aircraft == 'D') {

            //Check if aircraft would fit in the boundaries
            if (indexStartingRow + 2 > boardSize) {
                return false;
            }

            //Check if there is free space for the ship
            for (unsigned i = indexStartingRow; i < indexStartingRow + 2; i++)
            {
                if (playerBoard[i][indexStartingColumn] != '*') {
                    return false;
                }
            }
        }
    }

    return true;
}

bool checkValidShootingCoordinates(char** playerBoard, unsigned boardSize, int indexRow, int indexColumn) {

    if (indexRow<1 || indexRow>boardSize) return false;

    if (indexColumn<1 || indexColumn>boardSize) return false;

    return true;

}

void printStartMenu() {

    std::cout << "Welcome to Battleships!" << std::endl;
    std::cout << std::endl;
    std::cout << "Choose game style" << std::endl;
    std::cout << std::endl;
    std::cout << "Press 0 for PVP" << std::endl;
    std::cout << "Press 1 for PVE" << std::endl;

}

void loadMatrixPlayer(char** playerBoard, unsigned boardSize) {

    playerBoard[0] = new char[boardSize];
    playerBoard[0][0] = ' ';

    for (unsigned i = 1; i < boardSize; i++)
    {
        playerBoard[0][i] = i - 1 + '0';

    }

    for (unsigned i = 1; i <= boardSize; i++)
    {
        playerBoard[i] = new char[boardSize];

        playerBoard[i][0] = i - 1 + '0';


        for (unsigned j = 1; j < boardSize; j++)
        {
            playerBoard[i][j] = '*';
        }
    }

}

void printBoard(char** playerBoard, unsigned boardSize) {

    for (unsigned i = 0; i < boardSize; i++)
    {
        for (unsigned j = 0; j < boardSize; j++)
        {
            std::cout << playerBoard[i][j] << " ";;
        }
        std::cout << std::endl;
    }

}

void initialiseAircraftCarrier(char** playerBoard, unsigned boardSize, char gameMaster) {

    // Create a random number generator engine
    std::random_device rd;  // Used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()

    // Generate a random integer between 0 and boardSize (inclusive)
    std::uniform_int_distribution<int> distribution(0, boardSize - 1);
    std::uniform_int_distribution<unsigned> placement(0, 1);


    std::cout << "Now its time to place your Aircraft carrier!(It's size is 5 and is displayed with the letter A!)" << std::endl;
    std::cout << "Please select whether you want to place your ship vertically or horizontally! Type V for vertical and H for horizontal!" << std::endl;

    char direction;

    if (gameMaster == 'p') {

        do
        {
            std::cin >> direction;

            if (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H') {
                std::cout << "Incorrect input!" << std::endl;
                std::cout << "Type V or v for vertical and H or h for horizontal! Try again!" << std::endl;
            }

        } while (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H');

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;


                std::cin >> row;



                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;

                std::cin >> column;
                column++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'A', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'A', direction));

            for (unsigned i = column; i < column + 5; i++)
            {
                playerBoard[row][i] = 'A';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned  column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;

                std::cin >> column;
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;

                std::cin >> row;
                row++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'A', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'A', direction));

            for (unsigned i = row; i < row + 5; i++)
            {
                playerBoard[i][column] = 'A';
            }

            printBoard(playerBoard, boardSize);
        }

    }

    else {


        unsigned random_number = placement(gen);
        if (random_number == 0) {

            direction = 'v';
        }

        else {

            direction = 'h';
        }

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;
                row = distribution(gen);
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;
                column = distribution(gen);
                column++;


            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'A', direction));

            for (unsigned i = column; i < column + 5; i++)
            {
                playerBoard[row][i] = 'A';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned  column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;
                column = distribution(gen);
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;
                row = distribution(gen);
                row++;

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'A', direction));

            for (unsigned i = row; i < row + 5; i++)
            {
                playerBoard[i][column] = 'A';
            }

            printBoard(playerBoard, boardSize);
        }



    }

}

void initialiseBattleShip(char** playerBoard, unsigned boardSize, char gameMaster) {

    std::random_device rd;  // Used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()

    // Generate a random integer between 0 and boardSize (inclusive)
    std::uniform_int_distribution<int> distribution(0, boardSize - 1);
    std::uniform_int_distribution<unsigned> placement(0, 1);

    std::cout << "Now its time to place your Battleship!(It's size is 4 and is displayed with the letter B!)" << std::endl;
    std::cout << "Please select whether you want to place your ship vertically or horizontally! Type V for vertical and H for horizontal!" << std::endl;

    char direction;

    if (gameMaster == 'p') {

        do
        {
            std::cin >> direction;

            if (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H') {
                std::cout << "Incorrect input!" << std::endl;
                std::cout << "Type V or v for vertical and H or h for horizontal! Try again!" << std::endl;
            }

        } while (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H');

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;

                std::cin >> row;
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;

                std::cin >> column;
                column++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'B', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'B', direction));

            for (unsigned i = column; i < column + 4; i++)
            {
                playerBoard[row][i] = 'B';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;

                std::cin >> column;
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;

                std::cin >> row;
                row++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'B', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'B', direction));

            for (unsigned i = row; i < row + 4; i++)
            {
                playerBoard[i][column] = 'B';
            }

            printBoard(playerBoard, boardSize);
        }

    }

    else {


        unsigned random_number = placement(gen);
        if (random_number == 0) {

            direction = 'v';
        }

        else {

            direction = 'h';
        }

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;
                row = distribution(gen);
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;
                column = distribution(gen);
                column++;


            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'B', direction));

            for (unsigned i = column; i < column + BATTLESHIP_SIZE; i++)
            {
                playerBoard[row][i] = 'B';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned  column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;
                column = distribution(gen);
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;
                row = distribution(gen);
                row++;

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'B', direction));

            for (unsigned i = row; i < row + BATTLESHIP_SIZE; i++)
            {
                playerBoard[i][column] = 'B';
            }

            printBoard(playerBoard, boardSize);
        }



    }


}

void initialiseCruiser(char** playerBoard, unsigned boardSize, char gamemaster) {

    std::random_device rd;  // Used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()

    // Generate a random integer between 0 and boardSize (inclusive)
    std::uniform_int_distribution<int> distribution(0, boardSize - 1);
    std::uniform_int_distribution<unsigned> placement(0, 1);

    std::cout << "Now its time to place your Cruiser!(It's size is 3 and is displayed with the letter C!)" << std::endl;
    std::cout << "Please select whether you want to place your ship vertically or horizontally! Type V for vertical and H for horizontal!" << std::endl;

    char direction;

    if (gamemaster == 'p') {

        do
        {
            std::cin >> direction;

            if (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H') {
                std::cout << "Incorrect input!" << std::endl;
                std::cout << "Type V or v for vertical and H or h for horizontal! Try again!" << std::endl;
            }

        } while (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H');

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;

                std::cin >> row;
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;

                std::cin >> column;
                column++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'C', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'C', direction));

            for (unsigned i = column; i < column + 3; i++)
            {
                playerBoard[row][i] = 'C';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;

                std::cin >> column;
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;

                std::cin >> row;
                row++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'C', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'C', direction));

            for (unsigned i = row; i < row + 3; i++)
            {
                playerBoard[i][column] = 'C';
            }

            printBoard(playerBoard, boardSize);
        }
    }

    else {


        unsigned random_number = placement(gen);
        if (random_number == 0) {

            direction = 'v';
        }

        else {

            direction = 'h';
        }

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;
                row = distribution(gen);
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;
                column = distribution(gen);
                column++;


            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'C', direction));

            for (unsigned i = column; i < column + CRUISER_SIZE; i++)
            {
                playerBoard[row][i] = 'C';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned  column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;
                column = distribution(gen);
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;
                row = distribution(gen);
                row++;

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'C', direction));

            for (unsigned i = row; i < row + CRUISER_SIZE; i++)
            {
                playerBoard[i][column] = 'C';
            }

            printBoard(playerBoard, boardSize);
        }



    }

}

void initialiseDestroyer(char** playerBoard, unsigned boardSize, char gamemaster) {

    std::random_device rd;  // Used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()

    // Generate a random integer between 0 and boardSize (inclusive)
    std::uniform_int_distribution<int> distribution(0, boardSize - 1);
    std::uniform_int_distribution<unsigned> placement(0, 1);

    std::cout << "Now its time to place your Destroyer!(It's size is 2 and is displayed with the letter D!)" << std::endl;
    std::cout << "Please select whether you want to place your ship vertically or horizontally! Type V for vertical and H for horizontal!" << std::endl;

    char direction;

    if (gamemaster == 'p') {

        do
        {
            std::cin >> direction;

            if (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H') {
                std::cout << "Incorrect input!" << std::endl;
                std::cout << "Type V or v for vertical and H or h for horizontal! Try again!" << std::endl;
            }

        } while (direction != 'v' && direction != 'h' && direction != 'V' && direction != 'H');

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;

                std::cin >> row;
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;

                std::cin >> column;
                column++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'D', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'D', direction));

            for (unsigned i = column; i < column + 2; i++)
            {
                playerBoard[row][i] = 'D';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;

                std::cin >> column;
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;

                std::cin >> row;
                row++;

                if (!checkValidCoordinates(playerBoard, boardSize, row, column, 'D', direction)) {
                    std::cout << "Incorrect input!" << std::endl;
                    std::cout << "You have typed invalid coordinates! Try again!" << std::endl;

                }

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'D', direction));

            for (unsigned i = row; i < row + 2; i++)
            {
                playerBoard[i][column] = 'D';
            }

            printBoard(playerBoard, boardSize);
        }
    }

    else if (gamemaster == 'c') {


        unsigned random_number = placement(gen);
        if (random_number == 0) {

            direction = 'v';
        }

        else {

            direction = 'h';
        }

        if (direction == 'h' || direction == 'H') {

            unsigned row;
            unsigned column;

            do
            {
                std::cout << "Type the index of the row you want to put your ship at!" << std::endl;
                row = distribution(gen);
                row++;


                std::cout << "Type the index of the column from which the space the ship will be placed!" << std::endl;
                column = distribution(gen);
                column++;


            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'D', direction));

            for (unsigned i = column; i < column + DESTROYER_SIZE; i++)
            {
                playerBoard[row][i] = 'D';
            }

            printBoard(playerBoard, boardSize);

        }

        else {

            unsigned row;
            unsigned  column;

            do
            {
                std::cout << "Type the index of the column you want to put your ship at!" << std::endl;
                column = distribution(gen);
                column++;


                std::cout << "Type the index of the row from which the space the ship will be placed!" << std::endl;
                row = distribution(gen);
                row++;

            } while (!checkValidCoordinates(playerBoard, boardSize, row, column, 'D', direction));

            for (unsigned i = row; i < row + DESTROYER_SIZE; i++)
            {
                playerBoard[i][column] = 'D';
            }

            printBoard(playerBoard, boardSize);
        }



    }
}

void clearConsole() {
    system("cls");
}

//Otherwise the active players can not see the results
void pressToContinue(char c) {

    std::cout << "Press any key to continue..." << std::endl;
    std::cin >> c;
    if (c != '\0') {
        clearConsole();
    }
}

int main()
{
    char c;
    char  gameStyle;
    unsigned boardSize;

    printStartMenu();

    //Get game style
    do
    {
        std::cin >> gameStyle;

        if (gameStyle != '0' && gameStyle != '1') {
            std::cout << "Incorrect input!" << std::endl;
            std::cout << "Only valid commands are 0 and 1! Try again!" << std::endl;

        }

    } while (gameStyle != '0' && gameStyle != '1');


    if (gameStyle == '1') {

        std::cout << "You have chosen PVE game!" << std::endl;

        std::cout << "Please insert the size of the board(From 5 to 10)" << std::endl;
        do
        {
            std::cin >> boardSize;

            if (boardSize < 5 || boardSize>10) {
                std::cout << "Incorrect input!" << std::endl;
                std::cout << "Board size must be between 5 and 10! Try again!" << std::endl;

            }

        } while (boardSize < 5 || boardSize>10);


        //Increase the board size by 1 so that in the matrix it is clearly visualized which column or row you are selecting
        boardSize++;
        char** pointerToPlayerBoard = new char* [boardSize];
        char** pointerToComputerBoard = new char* [boardSize];
        char** pointerToOpponentPlayerBoard = new char* [boardSize];
        char** pointerToOpponentComputerBoard = new char* [boardSize];

        //Load up the boards with custom elements
        loadMatrixPlayer(pointerToPlayerBoard, boardSize);
        loadMatrixPlayer(pointerToComputerBoard, boardSize);
        loadMatrixPlayer(pointerToOpponentPlayerBoard, boardSize);
        loadMatrixPlayer(pointerToOpponentComputerBoard, boardSize);

        std::cout << "You have chosen your game settings!" << std::endl;
        pressToContinue(c);

        //initialise boats
        printBoard(pointerToPlayerBoard, boardSize);

        std::cout << "Player1. Now its time to fill in your battle ships!" << std::endl;

        initialiseAircraftCarrier(pointerToPlayerBoard, boardSize, 'p');

        initialiseBattleShip(pointerToPlayerBoard, boardSize, 'p');

        initialiseCruiser(pointerToPlayerBoard, boardSize, 'p');

        initialiseDestroyer(pointerToPlayerBoard, boardSize, 'p');

        initialiseDestroyer(pointerToPlayerBoard, boardSize, 'p');

        std::cout << "You have filled all the needed spaces!" << std::endl;
        pressToContinue(c);

        //initialise ships player2
        printBoard(pointerToComputerBoard, boardSize);

        std::cout << "Player2. Now its time to fill in your battle ships!" << std::endl;

        initialiseAircraftCarrier(pointerToComputerBoard, boardSize, 'c');

        initialiseBattleShip(pointerToComputerBoard, boardSize, 'c');

        initialiseCruiser(pointerToComputerBoard, boardSize, 'c');

        initialiseDestroyer(pointerToComputerBoard, boardSize, 'c');

        initialiseDestroyer(pointerToComputerBoard, boardSize, 'c');

        std::cout << "You have filled all the needed spaces!" << std::endl;
        pressToContinue(c);


        unsigned hitsPlayer = 0;
        unsigned hitsComputer = 0;


        while (hitsPlayer != 16 && hitsComputer != 16) {

            std::cout << "Hello Player 1! This is the opponents board at which you are aiming!" << std::endl;
            std::cout << "If you manage to hit a ship its index would appear on that spot!" << std::endl;
            std::cout << "However if you aim at the water a ~ would appear on that spot!" << std::endl;

            printBoard(pointerToPlayerBoard, boardSize);

            int rowIndex;
            int colIndex;

            do
            {
                std::cout << "Type the index of the row where the space you want to hit is!" << std::endl;

                std::cin >> rowIndex;
                rowIndex++;

                std::cout << "Type the index of the column where the space you want to hit is!" << std::endl;

                std::cin >> colIndex;
                colIndex++;

                if (pointerToOpponentPlayerBoard[rowIndex][colIndex] != '*') {
                    std::cout << "You have already shot a missile at this space! " << std::endl;
                    std::cout << "Please choose another space!" << std::endl;
                    rowIndex = -1;
                    colIndex = -1;
                    continue;
                }


                if (checkValidShootingCoordinates(pointerToOpponentPlayerBoard, boardSize, rowIndex, colIndex)) {


                    if (pointerToComputerBoard[rowIndex][colIndex] == '*') {
                        std::cout << "You missed! Now its your opponents turn!" << std::endl;
                        pointerToOpponentPlayerBoard[rowIndex][colIndex] = '~';
                    }

                    else {
                        std::cout << "You managed to hit a ship! Good job! However, now its your opponents turn!" << std::endl;
                        pointerToOpponentPlayerBoard[rowIndex][colIndex] = pointerToComputerBoard[rowIndex][colIndex];
                        hitsPlayer++;
                    }

                }

            } while (!checkValidShootingCoordinates(pointerToOpponentPlayerBoard, boardSize, rowIndex, colIndex));


            pressToContinue(c);

            std::cout << "This is the computer shooting! Just sit back and watch being beaten!" << std::endl;
           

            printBoard(pointerToOpponentComputerBoard, boardSize);

            do
            {
                std::cout << "Type the index of the row where the space you want to hit is!" << std::endl;

                std::cin >> rowIndex;
                rowIndex++;

                std::cout << "Type the index of the column where the space you want to hit is!" << std::endl;

                std::cin >> colIndex;
                colIndex++;

                if (pointerToOpponentComputerBoard[rowIndex][colIndex] != '*') {
                    std::cout << "You have already shot a missile at this space! " << std::endl;
                    std::cout << "Please choose another space!" << std::endl;
                    rowIndex = -1;
                    colIndex = -1;
                    continue;
                }


                if (checkValidShootingCoordinates(pointerToOpponentComputerBoard, boardSize, rowIndex, colIndex)) {


                    if (pointerToComputerBoard[rowIndex][colIndex] == '*') {
                        std::cout << "You missed! Now its your opponents turn!" << std::endl;
                        pointerToOpponentComputerBoard[rowIndex][colIndex] = '~';
                    }

                    else {
                        std::cout << "You managed to hit a ship! Good job! However, now its your opponents turn!" << std::endl;
                        pointerToOpponentComputerBoard[rowIndex][colIndex] = pointerToPlayerBoard[rowIndex][colIndex];
                        hitsComputer++;
                    }

                }

            } while (!checkValidShootingCoordinates(pointerToOpponentComputerBoard, boardSize, rowIndex, colIndex));



            pressToContinue(c);

        }


        //final result
        if (hitsPlayer == 16) {
            std::cout << "Congratulations Player you win!" << std::endl;
        }

        else {
            std::cout << "You lost to the computer!" << std::endl;
        }

        delete[] pointerToPlayerBoard;
        delete[] pointerToComputerBoard;


    }
    /*
     else {
         std::cout << "You have chosen PVP game!" << std::endl;
     }

     //Get board size
     std::cout << "Please insert the size of the board(From 5 to 10)" << std::endl;
     do
     {
         std::cin >> boardSize;

         if (boardSize < 5 || boardSize>10) {
             std::cout << "Incorrect input!" << std::endl;
             std::cout << "Board size must be between 5 and 10! Try again!" << std::endl;

         }

     } while (boardSize < 5 || boardSize>10);

     //Increase the board size by 1 so that in the matrix it is clearly visualized which column or row you are selecting
     boardSize++;
     char** pointerToPlayer1Board = new char* [boardSize];
     char** pointerToPlayer2Board = new char* [boardSize];
     char** pointerToOpponentPlayer1Board = new char* [boardSize];
     char** pointerToOpponentPlayer2Board = new char* [boardSize];

     //Load up the boards with custom elements
     loadMatrixPlayer(pointerToPlayer1Board, boardSize);
     loadMatrixPlayer(pointerToPlayer2Board, boardSize);
     loadMatrixPlayer(pointerToOpponentPlayer1Board, boardSize);
     loadMatrixPlayer(pointerToOpponentPlayer2Board, boardSize);

     std::cout << "You have chosen your game settings!" << std::endl;
     pressToContinue(c);


     //initialise boats
     printBoard(pointerToPlayer1Board, boardSize);

     std::cout << "Player1. Now its time to fill in your battle ships!" << std::endl;

     initialiseAircraftCarrier(pointerToPlayer1Board, boardSize);

     initialiseBattleShip(pointerToPlayer1Board, boardSize);

     initialiseCruiser(pointerToPlayer1Board, boardSize);

     initialiseDestroyer(pointerToPlayer1Board, boardSize);

     initialiseDestroyer(pointerToPlayer1Board, boardSize);

     std::cout << "You have filled all the needed spaces!" << std::endl;
     pressToContinue(c);


     //initialise ships player2
     printBoard(pointerToPlayer2Board, boardSize);

     std::cout << "Player2. Now its time to fill in your battle ships!" << std::endl;

     initialiseAircraftCarrier(pointerToPlayer2Board, boardSize);

     initialiseBattleShip(pointerToPlayer2Board, boardSize);

     initialiseCruiser(pointerToPlayer2Board, boardSize);

     initialiseDestroyer(pointerToPlayer2Board, boardSize);

     initialiseDestroyer(pointerToPlayer2Board, boardSize);

     std::cout << "You have filled all the needed spaces!" << std::endl;
     pressToContinue(c);



     unsigned hitsPlayer1 = 0;
     unsigned hitsPlayer2 = 0;


     while (hitsPlayer1 != 16 && hitsPlayer2 != 16) {

         std::cout << "Hello Player 1! This is the opponents board at which you are aiming!" << std::endl;
         std::cout << "If you manage to hit a ship its index would appear on that spot!" << std::endl;
         std::cout << "However if you aim at the water a ~ would appear on that spot!" << std::endl;

         printBoard(pointerToOpponentPlayer1Board, boardSize);

         int rowIndex;
         int colIndex;

         do
         {
             std::cout << "Type the index of the row where the space you want to hit is!" << std::endl;

             std::cin >> rowIndex;
             rowIndex++;

             std::cout << "Type the index of the column where the space you want to hit is!" << std::endl;

             std::cin >> colIndex;
             colIndex++;

             if (pointerToOpponentPlayer1Board[rowIndex][colIndex] != '*') {
                 std::cout << "You have already shot a missile at this space! " << std::endl;
                 std::cout << "Please choose another space!" << std::endl;
                 rowIndex = -1;
                 colIndex = -1;
                 continue;
             }


             if (checkValidShootingCoordinates(pointerToOpponentPlayer1Board, boardSize, rowIndex, colIndex)) {


                  if (pointerToPlayer2Board[rowIndex][colIndex] == '*') {
                     std::cout << "You missed! Now its your opponents turn!" << std::endl;
                     pointerToOpponentPlayer1Board[rowIndex][colIndex] = '~';
                 }

                 else {
                     std::cout << "You managed to hit a ship! Good job! However, now its your opponents turn!" << std::endl;
                     pointerToOpponentPlayer1Board[rowIndex][colIndex] = pointerToPlayer2Board[rowIndex][colIndex];
                     hitsPlayer1++;
                 }

             }

         } while (!checkValidShootingCoordinates(pointerToOpponentPlayer1Board, boardSize, rowIndex, colIndex));


         pressToContinue(c);

         std::cout << "Hello Player 2! This is the opponents board at which you are aiming!" << std::endl;
         std::cout << "If you manage to hit a ship its index would appear on that spot!" << std::endl;
         std::cout << "However if you aim at the water a ~ would appear on that spot!" << std::endl;

         printBoard(pointerToOpponentPlayer2Board, boardSize);

         do
         {
             std::cout << "Type the index of the row where the space you want to hit is!" << std::endl;

             std::cin >> rowIndex;
             rowIndex++;

             std::cout << "Type the index of the column where the space you want to hit is!" << std::endl;

             std::cin >> colIndex;
             colIndex++;

             if (pointerToOpponentPlayer2Board[rowIndex][colIndex] != '*') {
                 std::cout << "You have already shot a missile at this space! " << std::endl;
                 std::cout << "Please choose another space!" << std::endl;
                 rowIndex = -1;
                 colIndex = -1;
                 continue;
             }


             if (checkValidShootingCoordinates(pointerToOpponentPlayer1Board, boardSize, rowIndex, colIndex)) {


                 if (pointerToPlayer1Board[rowIndex][colIndex] == '*') {
                     std::cout << "You missed! Now its your opponents turn!" << std::endl;
                     pointerToOpponentPlayer2Board[rowIndex][colIndex] = '~';
                 }

                 else {
                     std::cout << "You managed to hit a ship! Good job! However, now its your opponents turn!" << std::endl;
                     pointerToOpponentPlayer2Board[rowIndex][colIndex] = pointerToPlayer1Board[rowIndex][colIndex];
                     hitsPlayer1++;
                 }

             }

         } while (!checkValidShootingCoordinates(pointerToOpponentPlayer2Board, boardSize, rowIndex, colIndex));



         pressToContinue(c);

     }


     //final result
     if (hitsPlayer1 == 16) {
         std::cout << "Congratulations Player1 you win!" << std::endl;
     }

     else {
         std::cout << "Congratulations Player2 you win!" << std::endl;
     }

     delete[] pointerToPlayer1Board;
             delete[] pointerToPlayer2Board;


   */



    return 0;
}
